<?php

//
// Hooks
//

/**
* Implementation of hook_menu().
*/
function vivaldi_orders_menu() {
  
  $items['preorders/fulfillment'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => 'vivaldi_orders_fulfillment_page',
    'title' => 'Pre-Order Fulfillment'
    );
  
  $items['preorders/success'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => 'vivaldi_orders_success_page',
    );
  
  return $items;
}

/**
* Implementation of hook_add_to_cart_data
*
* Called when items are added to cart to allow modules
* to add info to the product data array.  Used here to
* add the reg_code.
*/
function vivaldi_orders_add_to_cart_data($form_values) {
  if (isset($form_values['reg_code'])) {
    return array('reg_code' => $form_values['reg_code']);
  }
}


/**
* Implementation of hook_ca_action
* 
* Ubercart conditional action info
*
*/
function vivaldi_orders_ca_action() {
  
  $order_arg = array(
    '#entity' => 'uc_order',
    '#title' => t('Order'),
    );
  
  $actions['vivaldi_orders_send_test_message'] = array(
    '#title' => t('Development debug message - Not for Production'),
    '#category' => t('Order'),
    '#callback' => 'vivaldi_orders_action_test_message',
    '#arguments' => array(
      'order' => $order_arg,
      ),
    );
  
  $actions['vivaldi_orders_make_inactive'] = array(
    '#title' => t('Mark pre-order as used and no longer active.'),
    '#category' => t('Order'),
    '#callback' => 'vivaldi_orders_action_make_inactive',
    '#arguments' => array(
      'order' => $order_arg,
      ),
    );
  
  return $actions;
}


//
// Page handlers
//

/**
* Order fulfillment page
*/
function vivaldi_orders_fulfillment_page() {
  return drupal_get_form('vivaldi_orders_fulfillment_form');
}

/**
* tmp page
*/
function vivaldi_orders_success_page() {
  return 'Got it';
}

//
// Form API Functions
//
/**
* Order fulfillment form
*/
function vivaldi_orders_fulfillment_form() {
    $form = array();
 
    $form['Name']=array(
        '#type'=>'textfield',
        '#required'=>true,
        '#default_value'=>' ',
        '#title'=>t('Full Name'),
        '#size'=>50,
        '#maxlength'=>128,
        '#weight'=>1);
 
    $form['Email']=array(
        '#type'=>'textfield',
        '#required'=>true,
        '#default_value'=>' ',
        '#title'=>t('Email Address'),
        '#size'=>50,
        '#maxlength'=>128,
        '#weight'=>2);
    
    $form['Reg_code']=array(
        '#type'=>'textfield',
        '#required'=>true,
        '#default_value'=>' ',
        '#title'=>t('Registration Code'),
        '#size'=>50,
        '#maxlength'=>128,
        '#weight'=>3);
    
    $form['submit']=array(
        '#type'=>'submit',
        '#value'=>'submit',
        '#weight'=>4);
 
      return $form;
}

function vivaldi_orders_fulfillment_form_validate($form, &$form_state) {
  // look for this reg code
  $query = "SELECT * from {vivaldi_orders} WHERE Reg_code = '%s' AND Active = '1'";
  $order_lookup = db_query($query, $form_state['values']['Reg_code']);
  
  if ($order = db_fetch_array($order_lookup)) {
    // Save order for submit function
    $form_state['vivaldi_orders']['order'] = $order;
    
    //reg code found, check that the email address matches
    if (strtolower($form_state['values']['Email']) != strtolower($order['Email'])) {
      form_set_error('Email', t('This email address does not match the registration code.'));
      return;
    }
    
  } else {
    //reg code not found
    form_set_error('Reg_code', t('This registration code was not found or has already been used.'));
    return;
  }
}

function vivaldi_orders_fulfillment_form_submit($form, &$form_state) {
  // Don't allow user to add to cart multiple times
  uc_cart_empty(uc_cart_get_id());

  //Get the quantity for the pre-order
  $qty = empty($form_state['vivaldi_orders']['order']['Quantity']) ? 1 : $form_state['vivaldi_orders']['order']['Quantity'];
  
  // product data array
  $data = array('nid' => 3, 'qty' => $qty, 'reg_code' => $form_state['values']['Reg_code']);
  
  /*  Must invoke hook_add_to_cart_data to build data array.  If this is not done, the product is
   *  not marked as shippable and checkout page has no shipping.  We must also implement 
   *  hook_add_to_cart_data to add the reg_code.
   */
  uc_cart_add_item(3, $qty, module_invoke_all('add_to_cart_data', $data));
  
  $form_state['redirect'] = 'cart';
}


//
// Ubercart actions
//

/*
 * Development debug aid - can be removed when no longer needed
*/
function vivaldi_orders_action_test_message(&$order, $settings) {
  dd("In vivaldi_orders_action_test_message");
  dd($order);
  dd($settings);
}

/*
 * Mark pre-order as used and no longer active
*/
function vivaldi_orders_action_make_inactive(&$order, $settings) {
  // loop through products - look for reg code in data - if found update
  foreach ($order->products as $pnumber => $product) {
    if (!empty($product->data['reg_code'])) {
      $preorder           = new stdClass();
      $preorder->Reg_code = $product->data['reg_code'];
      $preorder->Active   = '0';
      $preorder->Used     = date("Y-m-d H:i:s");
      
      drupal_write_record('vivaldi_orders', $preorder, 'Reg_code');
    }
  }
}

